digraph "classes_ganslate_hierarchy" {
rankdir=BT
charset="utf-8"
"ganslate.nn.losses.adversarial_loss.AdversarialLoss" [color="black", fontcolor="black", label=<{AdversarialLoss|gan_mode<br ALIGN="LEFT"/>loss : BCEWithLogitsLoss, MSELoss, NoneType<br ALIGN="LEFT"/>|calculate_loss(prediction: torch.Tensor, target_is_real: bool)<br ALIGN="LEFT"/>forward(prediction: Union[Dict[str, torch.Tensor], torch.Tensor], target_is_real: bool)<br ALIGN="LEFT"/>get_target_tensor(prediction, target_is_real)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.configs.base.BaseDatasetConfig" [color="black", fontcolor="black", label=<{BaseDatasetConfig|num_workers : int<br ALIGN="LEFT"/>pin_memory : bool<br ALIGN="LEFT"/>root : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.base.BaseDiscriminatorConfig" [color="black", fontcolor="black", label=<{BaseDiscriminatorConfig|in_channels<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.engines.base.BaseEngine" [color="black", fontcolor="black", label=<{BaseEngine|conf<br ALIGN="LEFT"/>logger : Logger<br ALIGN="LEFT"/>model : NoneType<br ALIGN="LEFT"/>output_dir<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.base.BaseEngineConfig" [color="black", fontcolor="black", label=<{BaseEngineConfig|batch_size : int<br ALIGN="LEFT"/>cuda : bool<br ALIGN="LEFT"/>dataset<br ALIGN="LEFT"/>logging<br ALIGN="LEFT"/>mixed_precision : bool<br ALIGN="LEFT"/>opt_level : str<br ALIGN="LEFT"/>output_dir : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.engines.base.BaseEngineWithInference" [color="black", fontcolor="black", label=<{BaseEngineWithInference|sliding_window_inferer : NoneType, SlidingWindowInferer<br ALIGN="LEFT"/>|infer(data)<br ALIGN="LEFT"/>save_generated_tensor(generated_tensor, metadata, data_loader, idx, dataset_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.gans.base.BaseGAN" [color="black", fontcolor="black", label=<{BaseGAN|conf<br ALIGN="LEFT"/>device : device<br ALIGN="LEFT"/>is_train<br ALIGN="LEFT"/>logger : Logger<br ALIGN="LEFT"/>losses : dict<br ALIGN="LEFT"/>metrics : dict<br ALIGN="LEFT"/>networks : dict<br ALIGN="LEFT"/>optimizers : dict<br ALIGN="LEFT"/>output_dir<br ALIGN="LEFT"/>schedulers<br ALIGN="LEFT"/>training_metrics<br ALIGN="LEFT"/>visuals : dict<br ALIGN="LEFT"/>|backward(loss, optimizer, retain_graph, loss_id)<br ALIGN="LEFT"/>convert_to_mixed_precision()<br ALIGN="LEFT"/>eval()<br ALIGN="LEFT"/><I>forward</I>()<br ALIGN="LEFT"/>get_loggable_data()<br ALIGN="LEFT"/>infer(input)<br ALIGN="LEFT"/><I>init_criterions</I>()<br ALIGN="LEFT"/>init_metrics()<br ALIGN="LEFT"/>init_networks()<br ALIGN="LEFT"/><I>init_optimizers</I>()<br ALIGN="LEFT"/>init_schedulers()<br ALIGN="LEFT"/>load_networks(iter_idx)<br ALIGN="LEFT"/><I>optimize_parameters</I>()<br ALIGN="LEFT"/>parallelize_networks()<br ALIGN="LEFT"/>save_checkpoint(iter_idx)<br ALIGN="LEFT"/><I>set_input</I>(input)<br ALIGN="LEFT"/>set_requires_grad(networks, requires_grad)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>update_learning_rate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.configs.base.BaseGANConfig" [color="black", fontcolor="black", label=<{BaseGANConfig|discriminator : Optional[BaseDiscriminatorConfig]<br ALIGN="LEFT"/>generator<br ALIGN="LEFT"/>norm_type : str<br ALIGN="LEFT"/>optimizer<br ALIGN="LEFT"/>weight_init_gain : float<br ALIGN="LEFT"/>weight_init_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.base.BaseGeneratorConfig" [color="black", fontcolor="black", label=<{BaseGeneratorConfig|in_out_channels<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.base.BaseOptimizerConfig" [color="black", fontcolor="black", label=<{BaseOptimizerConfig|adversarial_loss_type : str<br ALIGN="LEFT"/>beta1 : float<br ALIGN="LEFT"/>beta2 : float<br ALIGN="LEFT"/>lr_D : float<br ALIGN="LEFT"/>lr_G : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.utils.trackers.base.BaseTracker" [color="black", fontcolor="black", label=<{BaseTracker|batch_size<br ALIGN="LEFT"/>conf<br ALIGN="LEFT"/>iter_end_time : NoneType<br ALIGN="LEFT"/>iter_idx : NoneType<br ALIGN="LEFT"/>iter_start_time : NoneType<br ALIGN="LEFT"/>output_dir<br ALIGN="LEFT"/>t_comp : NoneType<br ALIGN="LEFT"/>t_data : NoneType<br ALIGN="LEFT"/>tensorboard : NoneType<br ALIGN="LEFT"/>wandb : NoneType<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>end_computation_timer()<br ALIGN="LEFT"/>end_dataloading_timer()<br ALIGN="LEFT"/>set_iter_idx(iter_idx)<br ALIGN="LEFT"/>start_computation_timer()<br ALIGN="LEFT"/>start_dataloading_timer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.configs.validation_testing.BaseValTestConfig" [color="black", fontcolor="black", label=<{BaseValTestConfig|dataset : Optional[base.BaseDatasetConfig]<br ALIGN="LEFT"/>multi_dataset : Optional[Dict[str, base.BaseDatasetConfig]]<br ALIGN="LEFT"/>sliding_window : Optional[SlidingWindowConfig]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.engines.validator_tester.BaseValTestEngine" [color="black", fontcolor="black", label=<{BaseValTestEngine|current_data_loader : DataLoader, NoneType, dict<br ALIGN="LEFT"/>data_loaders : DataLoader, dict<br ALIGN="LEFT"/>metricizer<br ALIGN="LEFT"/>tracker<br ALIGN="LEFT"/>visuals : dict<br ALIGN="LEFT"/>|run(current_idx)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.configs.validation_testing.BaseValTestMetricsConfig" [color="black", fontcolor="black", label=<{BaseValTestMetricsConfig|histogram_chi2 : bool<br ALIGN="LEFT"/>mae : bool<br ALIGN="LEFT"/>mse : bool<br ALIGN="LEFT"/>nmi : bool<br ALIGN="LEFT"/>nmse : bool<br ALIGN="LEFT"/>psnr : bool<br ALIGN="LEFT"/>ssim : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.gans.unpaired.cut.CUT" [color="black", fontcolor="black", label=<{CUT|criterion_adv<br ALIGN="LEFT"/>criterion_nce<br ALIGN="LEFT"/>criterion_nce_idt : L1Loss<br ALIGN="LEFT"/>is_flipped : bool<br ALIGN="LEFT"/>lambda_adv<br ALIGN="LEFT"/>lambda_nce<br ALIGN="LEFT"/>lambda_nce_idt<br ALIGN="LEFT"/>losses<br ALIGN="LEFT"/>nce_layers<br ALIGN="LEFT"/>networks<br ALIGN="LEFT"/>num_patches<br ALIGN="LEFT"/>use_equivariance_flip<br ALIGN="LEFT"/>visuals<br ALIGN="LEFT"/>|backward_D()<br ALIGN="LEFT"/>backward_G_and_mlp()<br ALIGN="LEFT"/>forward()<br ALIGN="LEFT"/>init_criterions()<br ALIGN="LEFT"/>init_networks()<br ALIGN="LEFT"/>init_optimizers()<br ALIGN="LEFT"/>optimize_parameters()<br ALIGN="LEFT"/>set_input(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.gans.unpaired.cut.CUTConfig" [color="black", fontcolor="black", label=<{CUTConfig|mlp_nc : int<br ALIGN="LEFT"/>nce_layers : Tuple[int]<br ALIGN="LEFT"/>num_patches : int<br ALIGN="LEFT"/>optimizer<br ALIGN="LEFT"/>use_equivariance_flip : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.base.CheckpointingConfig" [color="black", fontcolor="black", label=<{CheckpointingConfig|load_iter : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.config.Config" [color="black", fontcolor="black", label=<{Config|infer : Optional[InferenceConfig]<br ALIGN="LEFT"/>mode : str<br ALIGN="LEFT"/>project : Optional[Any]<br ALIGN="LEFT"/>test : Optional[TestConfig]<br ALIGN="LEFT"/>train<br ALIGN="LEFT"/>val : Optional[ValidationConfig]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.gans.unpaired.cyclegan.CycleGAN" [color="black", fontcolor="black", label=<{CycleGAN|criterion_G<br ALIGN="LEFT"/>criterion_adv<br ALIGN="LEFT"/>fake_A_pool<br ALIGN="LEFT"/>fake_B_pool<br ALIGN="LEFT"/>losses<br ALIGN="LEFT"/>networks<br ALIGN="LEFT"/>optimizers<br ALIGN="LEFT"/>pred_fake<br ALIGN="LEFT"/>pred_real<br ALIGN="LEFT"/>visuals<br ALIGN="LEFT"/>|backward_D(discriminator)<br ALIGN="LEFT"/>backward_G()<br ALIGN="LEFT"/>forward()<br ALIGN="LEFT"/>infer(input, direction)<br ALIGN="LEFT"/>init_criterions()<br ALIGN="LEFT"/>init_optimizers()<br ALIGN="LEFT"/>optimize_parameters()<br ALIGN="LEFT"/>set_input(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.gans.unpaired.cyclegan.CycleGANConfig" [color="black", fontcolor="black", label=<{CycleGANConfig|optimizer<br ALIGN="LEFT"/>pool_size : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.losses.cyclegan_losses.CycleGANLosses" [color="black", fontcolor="black", label=<{CycleGANLosses|criterion_cycle<br ALIGN="LEFT"/>criterion_idt : NoneType<br ALIGN="LEFT"/>lambda_AB<br ALIGN="LEFT"/>lambda_BA<br ALIGN="LEFT"/>|is_using_identity()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.losses.cyclegan_losses.CycleLoss" [color="black", fontcolor="black", label=<{CycleLoss|alpha<br ALIGN="LEFT"/>beta<br ALIGN="LEFT"/>criterion : L1Loss<br ALIGN="LEFT"/>ssim_criterion : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.base.DiscriminatorInChannelsConfig" [color="black", fontcolor="black", label=<{DiscriminatorInChannelsConfig|A : Optional[int]<br ALIGN="LEFT"/>B : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.vnet2d.DownBlock" [color="black", fontcolor="black", label=<{DownBlock|core<br ALIGN="LEFT"/>down_conv_ab : Sequential<br ALIGN="LEFT"/>down_conv_ba : Sequential<br ALIGN="LEFT"/>relu : PReLU<br ALIGN="LEFT"/>|build_down_conv(in_channels, out_channels, norm_layer, use_bias)<br ALIGN="LEFT"/>forward(x, inverse)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.DownBlock" [color="black", fontcolor="black", label=<{DownBlock|core<br ALIGN="LEFT"/>down_conv_ab : Sequential<br ALIGN="LEFT"/>down_conv_ba : Sequential<br ALIGN="LEFT"/>is_separable<br ALIGN="LEFT"/>relu : PReLU<br ALIGN="LEFT"/>|build_down_conv(in_channels, out_channels, norm_layer, use_bias)<br ALIGN="LEFT"/>forward(x, inverse)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.gans.unpaired.cut.FeaturePatchMLP" [color="black", fontcolor="black", label=<{FeaturePatchMLP|l2norm<br ALIGN="LEFT"/>mlps : ModuleList<br ALIGN="LEFT"/>num_patches : int<br ALIGN="LEFT"/>|forward(feats, patch_ids)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.configs.base.GeneratorInOutChannelsConfig" [color="black", fontcolor="black", label=<{GeneratorInOutChannelsConfig|AB : Tuple[int, int]<br ALIGN="LEFT"/>BA : Optional[Tuple[int, int]]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.losses.cyclegan_losses.IdentityLoss" [color="black", fontcolor="black", label=<{IdentityLoss|criterion : L1Loss<br ALIGN="LEFT"/>lambda_identity<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.data.utils.image_pool.ImagePool" [color="black", fontcolor="black", label=<{ImagePool|images : list<br ALIGN="LEFT"/>num_imgs : int<br ALIGN="LEFT"/>pool_size<br ALIGN="LEFT"/>|query(images)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.configs.inference.InferenceConfig" [color="black", fontcolor="black", label=<{InferenceConfig|checkpointing<br ALIGN="LEFT"/>dataset : Optional[base.BaseDatasetConfig]<br ALIGN="LEFT"/>is_deployment : bool<br ALIGN="LEFT"/>sliding_window : Optional[validation_testing.SlidingWindowConfig]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.utils.trackers.inference.InferenceTracker" [color="black", fontcolor="black", label=<{InferenceTracker|iter_idx<br ALIGN="LEFT"/>logger : Logger<br ALIGN="LEFT"/>saving_start_time<br ALIGN="LEFT"/>t_save<br ALIGN="LEFT"/>|end_saving_timer()<br ALIGN="LEFT"/>log_iter(visuals, len_dataset)<br ALIGN="LEFT"/>start_saving_timer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.engines.inferer.Inferer" [color="black", fontcolor="black", label=<{Inferer|data_loader : DataLoader, dict<br ALIGN="LEFT"/>logger : Logger<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>tracker<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.data.samplers.InfiniteSampler" [color="black", fontcolor="black", label=<{InfiniteSampler|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.vnet2d.InputBlock" [color="black", fontcolor="black", label=<{InputBlock|bn1<br ALIGN="LEFT"/>conv1 : Conv2d<br ALIGN="LEFT"/>n_repeats<br ALIGN="LEFT"/>relu : PReLU<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.InputBlock" [color="black", fontcolor="black", label=<{InputBlock|bn1<br ALIGN="LEFT"/>conv1 : Conv3d<br ALIGN="LEFT"/>n_repeats<br ALIGN="LEFT"/>relu : PReLU<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.invertible.InvertibleBlock" [color="black", fontcolor="black", label=<{InvertibleBlock|invertible_block : InvertibleModuleWrapper<br ALIGN="LEFT"/>|forward(x, inverse)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.invertible.InvertibleSequence" [color="black", fontcolor="black", label=<{InvertibleSequence|sequence : Sequential<br ALIGN="LEFT"/>|forward(x, inverse)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.gans.unpaired.cut.LNorm" [color="black", fontcolor="black", label=<{LNorm|power : int<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.configs.base.LoggingConfig" [color="black", fontcolor="black", label=<{LoggingConfig|freq : int<br ALIGN="LEFT"/>image_window : Optional[Tuple[float, float]]<br ALIGN="LEFT"/>multi_modality_split : Optional[MultiModalitySplitConfig]<br ALIGN="LEFT"/>tensorboard : bool<br ALIGN="LEFT"/>wandb : Optional[WandbConfig]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.base.MultiModalitySplitConfig" [color="black", fontcolor="black", label=<{MultiModalitySplitConfig|A : Optional[Tuple[int]]<br ALIGN="LEFT"/>B : Optional[Tuple[int]]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.discriminators.patchgan.multiscale_patchgan3d.MultiScalePatchGAN3D" [color="black", fontcolor="black", label=<{MultiScalePatchGAN3D|model : ModuleDict<br ALIGN="LEFT"/>|forward(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.discriminators.patchgan.multiscale_patchgan3d.MultiScalePatchGAN3DConfig" [color="black", fontcolor="black", label=<{MultiScalePatchGAN3DConfig|kernel_size : Tuple[int]<br ALIGN="LEFT"/>n_layers : int<br ALIGN="LEFT"/>ndf : int<br ALIGN="LEFT"/>scales : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.gans.paired.pix2pix.OptimizerConfig" [color="black", fontcolor="black", label=<{OptimizerConfig|lambda_pix2pix : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.gans.unpaired.cut.OptimizerConfig" [color="black", fontcolor="black", label=<{OptimizerConfig|lambda_adv : float<br ALIGN="LEFT"/>lambda_nce : float<br ALIGN="LEFT"/>lambda_nce_idt : float<br ALIGN="LEFT"/>nce_T : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.gans.unpaired.cyclegan.OptimizerConfig" [color="black", fontcolor="black", label=<{OptimizerConfig|lambda_AB : float<br ALIGN="LEFT"/>lambda_BA : float<br ALIGN="LEFT"/>lambda_identity : float<br ALIGN="LEFT"/>proportion_ssim : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.gans.unpaired.revgan.OptimizerConfig" [color="black", fontcolor="black", label=<{OptimizerConfig|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.vnet2d.OutBlock" [color="black", fontcolor="black", label=<{OutBlock|bn1<br ALIGN="LEFT"/>conv1 : Conv2d<br ALIGN="LEFT"/>conv2 : Conv2d<br ALIGN="LEFT"/>relu1 : PReLU<br ALIGN="LEFT"/>tanh : Tanh<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.OutBlock" [color="black", fontcolor="black", label=<{OutBlock|bn1<br ALIGN="LEFT"/>conv1 : Conv3d<br ALIGN="LEFT"/>conv2 : Conv3d<br ALIGN="LEFT"/>relu1 : PReLU<br ALIGN="LEFT"/>tanh : Tanh<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.data.paired_image_dataset.PairedImageDataset" [color="black", fontcolor="black", label=<{PairedImageDataset|A_paths<br ALIGN="LEFT"/>B_paths<br ALIGN="LEFT"/>dir_A<br ALIGN="LEFT"/>dir_B<br ALIGN="LEFT"/>n_samples<br ALIGN="LEFT"/>rgb_or_grayscale : str<br ALIGN="LEFT"/>transform<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.data.paired_image_dataset.PairedImageDatasetConfig" [color="black", fontcolor="black", label=<{PairedImageDatasetConfig|final_size : Tuple[int, int]<br ALIGN="LEFT"/>image_channels : int<br ALIGN="LEFT"/>load_size : Tuple[int, int]<br ALIGN="LEFT"/>preprocess : Tuple[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.discriminators.patchgan.patchgan2d.PatchGAN2D" [color="black", fontcolor="black", label=<{PatchGAN2D|model : Sequential<br ALIGN="LEFT"/>|forward(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.discriminators.patchgan.patchgan2d.PatchGAN2DConfig" [color="black", fontcolor="black", label=<{PatchGAN2DConfig|kernel_size : Tuple[int]<br ALIGN="LEFT"/>n_layers : int<br ALIGN="LEFT"/>ndf : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.discriminators.patchgan.patchgan3d.PatchGAN3D" [color="black", fontcolor="black", label=<{PatchGAN3D|model : Sequential<br ALIGN="LEFT"/>|forward(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.discriminators.patchgan.patchgan3d.PatchGAN3DConfig" [color="black", fontcolor="black", label=<{PatchGAN3DConfig|kernel_size : Tuple[int]<br ALIGN="LEFT"/>n_layers : int<br ALIGN="LEFT"/>ndf : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.losses.cut_losses.PatchNCELoss" [color="black", fontcolor="black", label=<{PatchNCELoss|batch_size<br ALIGN="LEFT"/>cross_entropy_loss : CrossEntropyLoss<br ALIGN="LEFT"/>nce_T<br ALIGN="LEFT"/>|forward(feat_q, feat_k)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.resnet.piresnet3d.Piresnet3D" [color="black", fontcolor="black", label=<{Piresnet3D|core<br ALIGN="LEFT"/>downconv_ab : Sequential<br ALIGN="LEFT"/>downconv_ba : Sequential<br ALIGN="LEFT"/>upconv_ab : Sequential<br ALIGN="LEFT"/>upconv_ba : Sequential<br ALIGN="LEFT"/>use_inverse : bool<br ALIGN="LEFT"/>|build_downconv(in_channels, norm_layer, first_layer_channels, use_bias)<br ALIGN="LEFT"/>build_upconv(out_channels, norm_layer, first_layer_channels, use_bias)<br ALIGN="LEFT"/>forward(x, inverse)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.resnet.piresnet3d.Piresnet3DConfig" [color="black", fontcolor="black", label=<{Piresnet3DConfig|depth : int<br ALIGN="LEFT"/>first_layer_channels : int<br ALIGN="LEFT"/>use_inverse : bool<br ALIGN="LEFT"/>use_memory_saving : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.gans.paired.pix2pix.Pix2PixConditionalGAN" [color="black", fontcolor="black", label=<{Pix2PixConditionalGAN|criterion_adv<br ALIGN="LEFT"/>criterion_pix2pix<br ALIGN="LEFT"/>losses<br ALIGN="LEFT"/>networks<br ALIGN="LEFT"/>optimizers<br ALIGN="LEFT"/>pred_fake<br ALIGN="LEFT"/>pred_real<br ALIGN="LEFT"/>visuals<br ALIGN="LEFT"/>|backward_D()<br ALIGN="LEFT"/>backward_G()<br ALIGN="LEFT"/>forward()<br ALIGN="LEFT"/>infer(input)<br ALIGN="LEFT"/>init_criterions()<br ALIGN="LEFT"/>init_optimizers()<br ALIGN="LEFT"/>optimize_parameters()<br ALIGN="LEFT"/>set_input(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.gans.paired.pix2pix.Pix2PixConditionalGANConfig" [color="black", fontcolor="black", label=<{Pix2PixConditionalGANConfig|optimizer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.losses.pix2pix_losses.Pix2PixLoss" [color="black", fontcolor="black", label=<{Pix2PixLoss|criterion : L1Loss<br ALIGN="LEFT"/>lambda_pix2pix<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.generators.resnet.resnet2d.ResidualBlock" [color="black", fontcolor="black", label=<{ResidualBlock|conv_block : Sequential<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.resnet.resnet3d.ResidualBlock" [color="black", fontcolor="black", label=<{ResidualBlock|conv_block : Sequential<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.resnet.resnet2d.Resnet2D" [color="black", fontcolor="black", label=<{Resnet2D|encoder : ModuleList<br ALIGN="LEFT"/>model : Sequential<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.resnet.resnet2d.Resnet2DConfig" [color="black", fontcolor="black", label=<{Resnet2DConfig|n_residual_blocks : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.generators.resnet.resnet3d.Resnet3D" [color="black", fontcolor="black", label=<{Resnet3D|model : Sequential<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.resnet.resnet3d.Resnet3DConfig" [color="black", fontcolor="black", label=<{Resnet3DConfig|n_residual_blocks : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.gans.unpaired.revgan.RevGAN" [color="black", fontcolor="black", label=<{RevGAN|criterion_G<br ALIGN="LEFT"/>criterion_adv<br ALIGN="LEFT"/>fake_A_pool<br ALIGN="LEFT"/>fake_B_pool<br ALIGN="LEFT"/>losses<br ALIGN="LEFT"/>networks<br ALIGN="LEFT"/>optimizers<br ALIGN="LEFT"/>pred_fake<br ALIGN="LEFT"/>pred_real<br ALIGN="LEFT"/>visuals<br ALIGN="LEFT"/>|backward_D(discriminator)<br ALIGN="LEFT"/>backward_G()<br ALIGN="LEFT"/>forward()<br ALIGN="LEFT"/>infer(input, direction)<br ALIGN="LEFT"/>init_criterions()<br ALIGN="LEFT"/>init_optimizers()<br ALIGN="LEFT"/>optimize_parameters()<br ALIGN="LEFT"/>set_input(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.gans.unpaired.revgan.RevGANConfig" [color="black", fontcolor="black", label=<{RevGANConfig|optimizer<br ALIGN="LEFT"/>pool_size : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.losses.utils.ssim.SSIMLoss" [color="black", fontcolor="black", label=<{SSIMLoss|K : tuple<br ALIGN="LEFT"/>win_sigma : float<br ALIGN="LEFT"/>win_size : int<br ALIGN="LEFT"/>|forward(X, Y, data_range)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.utils.csv_saver.Saver" [color="black", fontcolor="black", label=<{Saver|df : DataFrame, NoneType<br ALIGN="LEFT"/>|add(row)<br ALIGN="LEFT"/>write(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.attention.SelfAttentionBlock" [color="black", fontcolor="black", label=<{SelfAttentionBlock|activation<br ALIGN="LEFT"/>chanel_in<br ALIGN="LEFT"/>gamma : Parameter<br ALIGN="LEFT"/>key_conv : Conv3d<br ALIGN="LEFT"/>query_conv : Conv3d<br ALIGN="LEFT"/>softmax : Softmax<br ALIGN="LEFT"/>value_conv : Conv3d<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.discriminators.patchgan.selfattention_patchgan3d.SelfAttentionPatchGAN3D" [color="black", fontcolor="black", label=<{SelfAttentionPatchGAN3D|model : Sequential<br ALIGN="LEFT"/>|forward(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.discriminators.patchgan.selfattention_patchgan3d.SelfAttentionPatchGAN3DConfig" [color="black", fontcolor="black", label=<{SelfAttentionPatchGAN3DConfig|kernel_size : Tuple[int]<br ALIGN="LEFT"/>n_layers : int<br ALIGN="LEFT"/>ndf : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.selfattention_vnet3d.SelfAttentionVnet3D" [color="black", fontcolor="black", label=<{SelfAttentionVnet3D|attn_blocks : ModuleList<br ALIGN="LEFT"/>downs : ModuleList<br ALIGN="LEFT"/>encoder : ModuleList<br ALIGN="LEFT"/>in_ab<br ALIGN="LEFT"/>in_ba<br ALIGN="LEFT"/>out_ab<br ALIGN="LEFT"/>out_ba<br ALIGN="LEFT"/>ups : ModuleList<br ALIGN="LEFT"/>use_inverse : bool<br ALIGN="LEFT"/>|forward(x, inverse)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.selfattention_vnet3d.SelfAttentionVnet3DConfig" [color="black", fontcolor="black", label=<{SelfAttentionVnet3DConfig|down_blocks : Tuple[int]<br ALIGN="LEFT"/>enable_attention_block : Tuple[bool]<br ALIGN="LEFT"/>first_layer_channels : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>up_blocks : Tuple[int]<br ALIGN="LEFT"/>use_inverse : bool<br ALIGN="LEFT"/>use_memory_saving : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.separable.SeparableConv3d" [color="black", fontcolor="black", label=<{SeparableConv3d|conv_depthwise : Conv3d<br ALIGN="LEFT"/>conv_pointwise : Conv3d<br ALIGN="LEFT"/>|forward(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.separable.SeparableConvTranspose3d" [color="black", fontcolor="black", label=<{SeparableConvTranspose3d|conv_transp_depthwise : ConvTranspose3d<br ALIGN="LEFT"/>conv_transp_pointwise : ConvTranspose3d<br ALIGN="LEFT"/>|forward(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.configs.validation_testing.SlidingWindowConfig" [color="black", fontcolor="black", label=<{SlidingWindowConfig|batch_size : int<br ALIGN="LEFT"/>mode : str<br ALIGN="LEFT"/>overlap : float<br ALIGN="LEFT"/>window_size : Tuple[int]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.data.utils.stochastic_focal_patching.StochasticFocalPatchSampler" [color="black", fontcolor="black", label=<{StochasticFocalPatchSampler|dims<br ALIGN="LEFT"/>focal_region_proportion<br ALIGN="LEFT"/>patch_size : ndarray<br ALIGN="LEFT"/>|apply_stochastic_focal_method(focal_point, focal_region, valid_start_region)<br ALIGN="LEFT"/>calculate_relative_focal_point(z, x, y, volume)<br ALIGN="LEFT"/>calculate_valid_start_region(volume)<br ALIGN="LEFT"/>get_patch_pair(volume_A, volume_B)<br ALIGN="LEFT"/>get_size(volume)<br ALIGN="LEFT"/>patch_and_focal_point_from_A(volume)<br ALIGN="LEFT"/>patch_from_B(volume, relative_focal_point)<br ALIGN="LEFT"/>pick_random_start(volume)<br ALIGN="LEFT"/>pick_stochastic_focal_start(volume, relative_focal_point)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.utils.trackers.tensorboard.TensorboardTracker" [color="black", fontcolor="black", label=<{TensorboardTracker|image_window<br ALIGN="LEFT"/>writer : SummaryWriter<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>log_iter(iter_idx, mode, visuals, learning_rates, losses, metrics)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.configs.validation_testing.TestConfig" [color="black", fontcolor="black", label=<{TestConfig|checkpointing<br ALIGN="LEFT"/>metrics<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.validation_testing.TestMetricsConfig" [color="black", fontcolor="black", label=<{TestMetricsConfig|compute_over_input : bool<br ALIGN="LEFT"/>save_to_csv : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.engines.validator_tester.Tester" [color="black", fontcolor="black", label=<{Tester|model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.training.TrainCheckpointingConfig" [color="black", fontcolor="black", label=<{TrainCheckpointingConfig|freq : int<br ALIGN="LEFT"/>load_iter : Optional[int]<br ALIGN="LEFT"/>load_optimizers : bool<br ALIGN="LEFT"/>start_after : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.training.TrainConfig" [color="black", fontcolor="black", label=<{TrainConfig|batch_size : int<br ALIGN="LEFT"/>checkpointing<br ALIGN="LEFT"/>cuda : bool<br ALIGN="LEFT"/>gan<br ALIGN="LEFT"/>logging<br ALIGN="LEFT"/>metrics<br ALIGN="LEFT"/>mixed_precision : bool<br ALIGN="LEFT"/>n_iters : int<br ALIGN="LEFT"/>n_iters_decay : int<br ALIGN="LEFT"/>opt_level : str<br ALIGN="LEFT"/>output_dir : str<br ALIGN="LEFT"/>seed : Optional[int]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.training.TrainMetricsConfig" [color="black", fontcolor="black", label=<{TrainMetricsConfig|discriminator_evolution : bool<br ALIGN="LEFT"/>ssim : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.engines.trainer.Trainer" [color="black", fontcolor="black", label=<{Trainer|data_loader : DataLoader, dict<br ALIGN="LEFT"/>iter_idx : int<br ALIGN="LEFT"/>iters : range<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>tracker<br ALIGN="LEFT"/>validator : NoneType<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.utils.metrics.train_metrics.TrainingMetrics" [color="black", fontcolor="black", label=<{TrainingMetrics|output_distributions : bool<br ALIGN="LEFT"/>ssim : NoneType<br ALIGN="LEFT"/>|compute_metrics_D(discriminator, pred_real, pred_fake)<br ALIGN="LEFT"/>compute_metrics_G(visuals)<br ALIGN="LEFT"/>get_SSIM_metric(input, target)<br ALIGN="LEFT"/>get_output_metric_D(out)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.utils.trackers.training.TrainingTracker" [color="black", fontcolor="black", label=<{TrainingTracker|log_freq<br ALIGN="LEFT"/>logger : Logger<br ALIGN="LEFT"/>|log_iter(learning_rates, losses, visuals, metrics)<br ALIGN="LEFT"/>save_learning_curves(losses)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.unet.unet2d.Unet2D" [color="black", fontcolor="black", label=<{Unet2D|model<br ALIGN="LEFT"/>|forward(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.unet.unet2d.Unet2DConfig" [color="black", fontcolor="black", label=<{Unet2DConfig|ngf : int<br ALIGN="LEFT"/>num_downs : int<br ALIGN="LEFT"/>use_dropout : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.generators.unet.unet3d.Unet3D" [color="black", fontcolor="black", label=<{Unet3D|model<br ALIGN="LEFT"/>|forward(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.unet.unet3d.Unet3DConfig" [color="black", fontcolor="black", label=<{Unet3DConfig|ngf : int<br ALIGN="LEFT"/>num_downs : int<br ALIGN="LEFT"/>use_dropout : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.generators.unet.unet2d.UnetSkipConnectionBlock" [color="black", fontcolor="black", label=<{UnetSkipConnectionBlock|model : Sequential<br ALIGN="LEFT"/>outermost : bool<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.unet.unet3d.UnetSkipConnectionBlock" [color="black", fontcolor="black", label=<{UnetSkipConnectionBlock|model : Sequential<br ALIGN="LEFT"/>outermost : bool<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.data.unpaired_image_dataset.UnpairedImageDataset" [color="black", fontcolor="black", label=<{UnpairedImageDataset|A_paths<br ALIGN="LEFT"/>A_size<br ALIGN="LEFT"/>B_paths<br ALIGN="LEFT"/>B_size<br ALIGN="LEFT"/>dir_A<br ALIGN="LEFT"/>dir_B<br ALIGN="LEFT"/>rgb_or_grayscale : str<br ALIGN="LEFT"/>transform : Compose<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.data.unpaired_image_dataset.UnpairedImageDatasetConfig" [color="black", fontcolor="black", label=<{UnpairedImageDatasetConfig|final_size : Tuple[int, int]<br ALIGN="LEFT"/>image_channels : int<br ALIGN="LEFT"/>load_size : Tuple[int, int]<br ALIGN="LEFT"/>preprocess : Tuple[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.vnet2d.UpBlock" [color="black", fontcolor="black", label=<{UpBlock|core<br ALIGN="LEFT"/>relu : PReLU<br ALIGN="LEFT"/>up_conv_ab : Sequential<br ALIGN="LEFT"/>up_conv_ba : Sequential<br ALIGN="LEFT"/>|build_up_conv(in_channels, out_channels, norm_layer, use_bias)<br ALIGN="LEFT"/>forward(x, skipx, inverse)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.UpBlock" [color="black", fontcolor="black", label=<{UpBlock|core<br ALIGN="LEFT"/>is_separable<br ALIGN="LEFT"/>relu : PReLU<br ALIGN="LEFT"/>up_conv_ab : Sequential<br ALIGN="LEFT"/>up_conv_ba : Sequential<br ALIGN="LEFT"/>|build_up_conv(in_channels, out_channels, norm_layer, use_bias)<br ALIGN="LEFT"/>forward(x, skipx, inverse)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.configs.validation_testing.ValMetricsConfig" [color="black", fontcolor="black", label=<{ValMetricsConfig|cycle_metrics : bool<br ALIGN="LEFT"/>save_to_csv : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.utils.metrics.val_test_metrics.ValTestMetrics" [color="black", fontcolor="black", label=<{ValTestMetrics|conf<br ALIGN="LEFT"/>|get_cycle_metrics(inputs, targets)<br ALIGN="LEFT"/>get_metrics(inputs, targets, mask)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.utils.trackers.validation_testing.ValTestTracker" [color="black", fontcolor="black", label=<{ValTestTracker|logger : Logger<br ALIGN="LEFT"/>metrics : list<br ALIGN="LEFT"/>saver : NoneType<br ALIGN="LEFT"/>visuals : list<br ALIGN="LEFT"/>|add_sample(visuals, metrics)<br ALIGN="LEFT"/>log_samples(iter_idx, dataset_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.configs.validation_testing.ValidationConfig" [color="black", fontcolor="black", label=<{ValidationConfig|freq : int<br ALIGN="LEFT"/>metrics<br ALIGN="LEFT"/>start_after : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.engines.validator_tester.Validator" [color="black", fontcolor="black", label=<{Validator|model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.vnet2d.Vnet2D" [color="black", fontcolor="black", label=<{Vnet2D|downs : ModuleList<br ALIGN="LEFT"/>encoder : ModuleList<br ALIGN="LEFT"/>in_ab<br ALIGN="LEFT"/>in_ba<br ALIGN="LEFT"/>out_ab<br ALIGN="LEFT"/>out_ba<br ALIGN="LEFT"/>ups : ModuleList<br ALIGN="LEFT"/>use_inverse : bool<br ALIGN="LEFT"/>|forward(x, inverse)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.vnet2d.Vnet2DConfig" [color="black", fontcolor="black", label=<{Vnet2DConfig|first_layer_channels : int<br ALIGN="LEFT"/>use_inverse : bool<br ALIGN="LEFT"/>use_memory_saving : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.Vnet3D" [color="black", fontcolor="black", label=<{Vnet3D|downs : ModuleList<br ALIGN="LEFT"/>encoder : ModuleList<br ALIGN="LEFT"/>in_ab<br ALIGN="LEFT"/>in_ba<br ALIGN="LEFT"/>out_ab<br ALIGN="LEFT"/>out_ba<br ALIGN="LEFT"/>ups : ModuleList<br ALIGN="LEFT"/>use_inverse : bool<br ALIGN="LEFT"/>|forward(x, inverse)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.Vnet3DConfig" [color="black", fontcolor="black", label=<{Vnet3DConfig|down_blocks : Tuple[int]<br ALIGN="LEFT"/>first_layer_channels : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>up_blocks : Tuple[int]<br ALIGN="LEFT"/>use_inverse : bool<br ALIGN="LEFT"/>use_memory_saving : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.configs.base.WandbConfig" [color="black", fontcolor="black", label=<{WandbConfig|entity : Optional[str]<br ALIGN="LEFT"/>id : Optional[str]<br ALIGN="LEFT"/>project : str<br ALIGN="LEFT"/>run : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ganslate.utils.trackers.wandb.WandbTracker" [color="black", fontcolor="black", label=<{WandbTracker|image_window : NoneType<br ALIGN="LEFT"/>|log_iter(iter_idx, visuals, mode, learning_rates, losses, metrics)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ganslate.configs.inference.InferenceConfig" -> "ganslate.configs.base.BaseEngineConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.configs.training.TrainCheckpointingConfig" -> "ganslate.configs.base.CheckpointingConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.configs.training.TrainConfig" -> "ganslate.configs.base.BaseEngineConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.configs.validation_testing.BaseValTestConfig" -> "ganslate.configs.base.BaseEngineConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.configs.validation_testing.TestConfig" -> "ganslate.configs.validation_testing.BaseValTestConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.configs.validation_testing.TestMetricsConfig" -> "ganslate.configs.validation_testing.BaseValTestMetricsConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.configs.validation_testing.ValMetricsConfig" -> "ganslate.configs.validation_testing.BaseValTestMetricsConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.configs.validation_testing.ValidationConfig" -> "ganslate.configs.validation_testing.BaseValTestConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.data.paired_image_dataset.PairedImageDatasetConfig" -> "ganslate.configs.base.BaseDatasetConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.data.unpaired_image_dataset.UnpairedImageDatasetConfig" -> "ganslate.configs.base.BaseDatasetConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.engines.base.BaseEngineWithInference" -> "ganslate.engines.base.BaseEngine" [arrowhead="empty", arrowtail="none"];
"ganslate.engines.inferer.Inferer" -> "ganslate.engines.base.BaseEngineWithInference" [arrowhead="empty", arrowtail="none"];
"ganslate.engines.trainer.Trainer" -> "ganslate.engines.base.BaseEngine" [arrowhead="empty", arrowtail="none"];
"ganslate.engines.validator_tester.BaseValTestEngine" -> "ganslate.engines.base.BaseEngineWithInference" [arrowhead="empty", arrowtail="none"];
"ganslate.engines.validator_tester.Tester" -> "ganslate.engines.validator_tester.BaseValTestEngine" [arrowhead="empty", arrowtail="none"];
"ganslate.engines.validator_tester.Validator" -> "ganslate.engines.validator_tester.BaseValTestEngine" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.discriminators.patchgan.multiscale_patchgan3d.MultiScalePatchGAN3DConfig" -> "ganslate.configs.base.BaseDiscriminatorConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.discriminators.patchgan.patchgan2d.PatchGAN2DConfig" -> "ganslate.configs.base.BaseDiscriminatorConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.discriminators.patchgan.patchgan3d.PatchGAN3DConfig" -> "ganslate.configs.base.BaseDiscriminatorConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.discriminators.patchgan.selfattention_patchgan3d.SelfAttentionPatchGAN3DConfig" -> "ganslate.configs.base.BaseDiscriminatorConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.gans.paired.pix2pix.OptimizerConfig" -> "ganslate.configs.base.BaseOptimizerConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.gans.paired.pix2pix.Pix2PixConditionalGAN" -> "ganslate.nn.gans.base.BaseGAN" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.gans.paired.pix2pix.Pix2PixConditionalGANConfig" -> "ganslate.configs.base.BaseGANConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.gans.unpaired.cut.CUT" -> "ganslate.nn.gans.base.BaseGAN" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.gans.unpaired.cut.CUTConfig" -> "ganslate.configs.base.BaseGANConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.gans.unpaired.cut.OptimizerConfig" -> "ganslate.configs.base.BaseOptimizerConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.gans.unpaired.cyclegan.CycleGAN" -> "ganslate.nn.gans.base.BaseGAN" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.gans.unpaired.cyclegan.CycleGANConfig" -> "ganslate.configs.base.BaseGANConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.gans.unpaired.cyclegan.OptimizerConfig" -> "ganslate.configs.base.BaseOptimizerConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.gans.unpaired.revgan.OptimizerConfig" -> "ganslate.nn.gans.unpaired.cyclegan.OptimizerConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.gans.unpaired.revgan.RevGAN" -> "ganslate.nn.gans.base.BaseGAN" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.gans.unpaired.revgan.RevGANConfig" -> "ganslate.configs.base.BaseGANConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.generators.resnet.piresnet3d.Piresnet3DConfig" -> "ganslate.configs.base.BaseGeneratorConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.generators.resnet.resnet2d.Resnet2DConfig" -> "ganslate.configs.base.BaseGeneratorConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.generators.resnet.resnet3d.Resnet3DConfig" -> "ganslate.configs.base.BaseGeneratorConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.generators.unet.unet2d.Unet2DConfig" -> "ganslate.configs.base.BaseGeneratorConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.generators.unet.unet3d.Unet3DConfig" -> "ganslate.configs.base.BaseGeneratorConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.generators.vnet.selfattention_vnet3d.SelfAttentionVnet3DConfig" -> "ganslate.configs.base.BaseGeneratorConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.generators.vnet.vnet2d.Vnet2DConfig" -> "ganslate.configs.base.BaseGeneratorConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.nn.generators.vnet.vnet3d.Vnet3DConfig" -> "ganslate.configs.base.BaseGeneratorConfig" [arrowhead="empty", arrowtail="none"];
"ganslate.utils.trackers.inference.InferenceTracker" -> "ganslate.utils.trackers.base.BaseTracker" [arrowhead="empty", arrowtail="none"];
"ganslate.utils.trackers.training.TrainingTracker" -> "ganslate.utils.trackers.base.BaseTracker" [arrowhead="empty", arrowtail="none"];
"ganslate.utils.trackers.validation_testing.ValTestTracker" -> "ganslate.utils.trackers.base.BaseTracker" [arrowhead="empty", arrowtail="none"];
"ganslate.configs.base.BaseDatasetConfig" -> "ganslate.configs.base.BaseEngineConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dataset", style="solid"];
"ganslate.configs.base.BaseGANConfig" -> "ganslate.configs.training.TrainConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gan", style="solid"];
"ganslate.configs.base.BaseGeneratorConfig" -> "ganslate.configs.base.BaseGANConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="generator", style="solid"];
"ganslate.configs.base.BaseOptimizerConfig" -> "ganslate.configs.base.BaseGANConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="optimizer", style="solid"];
"ganslate.configs.base.CheckpointingConfig" -> "ganslate.configs.inference.InferenceConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="checkpointing", style="solid"];
"ganslate.configs.base.CheckpointingConfig" -> "ganslate.configs.validation_testing.TestConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="checkpointing", style="solid"];
"ganslate.configs.base.DiscriminatorInChannelsConfig" -> "ganslate.configs.base.BaseDiscriminatorConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="in_channels", style="solid"];
"ganslate.configs.base.GeneratorInOutChannelsConfig" -> "ganslate.configs.base.BaseGeneratorConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="in_out_channels", style="solid"];
"ganslate.configs.base.LoggingConfig" -> "ganslate.configs.base.BaseEngineConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logging", style="solid"];
"ganslate.configs.base.LoggingConfig" -> "ganslate.configs.training.TrainConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logging", style="solid"];
"ganslate.configs.training.TrainCheckpointingConfig" -> "ganslate.configs.training.TrainConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="checkpointing", style="solid"];
"ganslate.configs.training.TrainConfig" -> "ganslate.configs.config.Config" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="train", style="solid"];
"ganslate.configs.training.TrainMetricsConfig" -> "ganslate.configs.training.TrainConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metrics", style="solid"];
"ganslate.configs.validation_testing.TestMetricsConfig" -> "ganslate.configs.validation_testing.TestConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metrics", style="solid"];
"ganslate.configs.validation_testing.ValMetricsConfig" -> "ganslate.configs.validation_testing.ValidationConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metrics", style="solid"];
"ganslate.data.utils.image_pool.ImagePool" -> "ganslate.nn.gans.unpaired.cyclegan.CycleGAN" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fake_A_pool", style="solid"];
"ganslate.data.utils.image_pool.ImagePool" -> "ganslate.nn.gans.unpaired.cyclegan.CycleGAN" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fake_B_pool", style="solid"];
"ganslate.data.utils.image_pool.ImagePool" -> "ganslate.nn.gans.unpaired.revgan.RevGAN" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fake_A_pool", style="solid"];
"ganslate.data.utils.image_pool.ImagePool" -> "ganslate.nn.gans.unpaired.revgan.RevGAN" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fake_B_pool", style="solid"];
"ganslate.engines.validator_tester.Validator" -> "ganslate.engines.trainer.Trainer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="validator", style="solid"];
"ganslate.nn.gans.paired.pix2pix.OptimizerConfig" -> "ganslate.nn.gans.paired.pix2pix.Pix2PixConditionalGANConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="optimizer", style="solid"];
"ganslate.nn.gans.unpaired.cut.LNorm" -> "ganslate.nn.gans.unpaired.cut.FeaturePatchMLP" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="l2norm", style="solid"];
"ganslate.nn.gans.unpaired.cut.OptimizerConfig" -> "ganslate.nn.gans.unpaired.cut.CUTConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="optimizer", style="solid"];
"ganslate.nn.gans.unpaired.cyclegan.OptimizerConfig" -> "ganslate.nn.gans.unpaired.cyclegan.CycleGANConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="optimizer", style="solid"];
"ganslate.nn.gans.unpaired.revgan.OptimizerConfig" -> "ganslate.nn.gans.unpaired.revgan.RevGANConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="optimizer", style="solid"];
"ganslate.nn.generators.unet.unet2d.UnetSkipConnectionBlock" -> "ganslate.nn.generators.unet.unet2d.Unet2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"ganslate.nn.generators.unet.unet3d.UnetSkipConnectionBlock" -> "ganslate.nn.generators.unet.unet3d.Unet3D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"ganslate.nn.generators.vnet.vnet2d.InputBlock" -> "ganslate.nn.generators.vnet.vnet2d.Vnet2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="in_ab", style="solid"];
"ganslate.nn.generators.vnet.vnet2d.InputBlock" -> "ganslate.nn.generators.vnet.vnet2d.Vnet2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="in_ba", style="solid"];
"ganslate.nn.generators.vnet.vnet2d.OutBlock" -> "ganslate.nn.generators.vnet.vnet2d.Vnet2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="out_ab", style="solid"];
"ganslate.nn.generators.vnet.vnet2d.OutBlock" -> "ganslate.nn.generators.vnet.vnet2d.Vnet2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="out_ba", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.InputBlock" -> "ganslate.nn.generators.vnet.selfattention_vnet3d.SelfAttentionVnet3D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="in_ab", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.InputBlock" -> "ganslate.nn.generators.vnet.selfattention_vnet3d.SelfAttentionVnet3D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="in_ba", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.InputBlock" -> "ganslate.nn.generators.vnet.vnet3d.Vnet3D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="in_ab", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.InputBlock" -> "ganslate.nn.generators.vnet.vnet3d.Vnet3D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="in_ba", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.OutBlock" -> "ganslate.nn.generators.vnet.selfattention_vnet3d.SelfAttentionVnet3D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="out_ab", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.OutBlock" -> "ganslate.nn.generators.vnet.selfattention_vnet3d.SelfAttentionVnet3D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="out_ba", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.OutBlock" -> "ganslate.nn.generators.vnet.vnet3d.Vnet3D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="out_ab", style="solid"];
"ganslate.nn.generators.vnet.vnet3d.OutBlock" -> "ganslate.nn.generators.vnet.vnet3d.Vnet3D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="out_ba", style="solid"];
"ganslate.nn.invertible.InvertibleSequence" -> "ganslate.nn.generators.resnet.piresnet3d.Piresnet3D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="core", style="solid"];
"ganslate.nn.invertible.InvertibleSequence" -> "ganslate.nn.generators.vnet.vnet2d.DownBlock" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="core", style="solid"];
"ganslate.nn.invertible.InvertibleSequence" -> "ganslate.nn.generators.vnet.vnet2d.UpBlock" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="core", style="solid"];
"ganslate.nn.invertible.InvertibleSequence" -> "ganslate.nn.generators.vnet.vnet3d.DownBlock" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="core", style="solid"];
"ganslate.nn.invertible.InvertibleSequence" -> "ganslate.nn.generators.vnet.vnet3d.UpBlock" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="core", style="solid"];
"ganslate.nn.losses.adversarial_loss.AdversarialLoss" -> "ganslate.nn.gans.paired.pix2pix.Pix2PixConditionalGAN" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="criterion_adv", style="solid"];
"ganslate.nn.losses.adversarial_loss.AdversarialLoss" -> "ganslate.nn.gans.unpaired.cut.CUT" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="criterion_adv", style="solid"];
"ganslate.nn.losses.adversarial_loss.AdversarialLoss" -> "ganslate.nn.gans.unpaired.cyclegan.CycleGAN" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="criterion_adv", style="solid"];
"ganslate.nn.losses.adversarial_loss.AdversarialLoss" -> "ganslate.nn.gans.unpaired.revgan.RevGAN" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="criterion_adv", style="solid"];
"ganslate.nn.losses.cyclegan_losses.CycleGANLosses" -> "ganslate.nn.gans.unpaired.cyclegan.CycleGAN" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="criterion_G", style="solid"];
"ganslate.nn.losses.cyclegan_losses.CycleGANLosses" -> "ganslate.nn.gans.unpaired.revgan.RevGAN" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="criterion_G", style="solid"];
"ganslate.nn.losses.cyclegan_losses.CycleLoss" -> "ganslate.nn.losses.cyclegan_losses.CycleGANLosses" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="criterion_cycle", style="solid"];
"ganslate.nn.losses.cyclegan_losses.IdentityLoss" -> "ganslate.nn.losses.cyclegan_losses.CycleGANLosses" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="criterion_idt", style="solid"];
"ganslate.nn.losses.pix2pix_losses.Pix2PixLoss" -> "ganslate.nn.gans.paired.pix2pix.Pix2PixConditionalGAN" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="criterion_pix2pix", style="solid"];
"ganslate.nn.losses.utils.ssim.SSIMLoss" -> "ganslate.nn.losses.cyclegan_losses.CycleLoss" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ssim_criterion", style="solid"];
"ganslate.nn.losses.utils.ssim.SSIMLoss" -> "ganslate.utils.metrics.train_metrics.TrainingMetrics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ssim", style="solid"];
"ganslate.nn.separable.SeparableConv3d" -> "ganslate.nn.generators.vnet.vnet3d.InputBlock" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="conv1", style="solid"];
"ganslate.nn.separable.SeparableConv3d" -> "ganslate.nn.generators.vnet.vnet3d.OutBlock" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="conv1", style="solid"];
"ganslate.nn.separable.SeparableConv3d" -> "ganslate.nn.generators.vnet.vnet3d.OutBlock" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="conv2", style="solid"];
"ganslate.utils.csv_saver.Saver" -> "ganslate.utils.trackers.validation_testing.ValTestTracker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="saver", style="solid"];
"ganslate.utils.metrics.train_metrics.TrainingMetrics" -> "ganslate.nn.gans.base.BaseGAN" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="training_metrics", style="solid"];
"ganslate.utils.metrics.val_test_metrics.ValTestMetrics" -> "ganslate.engines.validator_tester.BaseValTestEngine" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metricizer", style="solid"];
"ganslate.utils.trackers.inference.InferenceTracker" -> "ganslate.engines.inferer.Inferer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tracker", style="solid"];
"ganslate.utils.trackers.tensorboard.TensorboardTracker" -> "ganslate.utils.trackers.base.BaseTracker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tensorboard", style="solid"];
"ganslate.utils.trackers.training.TrainingTracker" -> "ganslate.engines.trainer.Trainer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tracker", style="solid"];
"ganslate.utils.trackers.validation_testing.ValTestTracker" -> "ganslate.engines.validator_tester.BaseValTestEngine" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tracker", style="solid"];
"ganslate.utils.trackers.wandb.WandbTracker" -> "ganslate.utils.trackers.base.BaseTracker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wandb", style="solid"];
}
